from tslearn.utils import to_time_series
from tslearn.barycenters import dtw_barycenter_averaging_petitjean
from tslearn.metrics import cdist_dtw
from data_extraction_and_storage_methods import *
from smote_based_wDBA import *
from conversion_and_utility_methods import *
import time
import numpy as np
import sys


"""
my_first_time_series = [1, 1, 1, 1, 3, 3, 3, 4, 4, 4, 4, 2, 2, 2]
formatted_time_series = to_time_series(my_first_time_series)
print(formatted_time_series.shape)
t_2 = [1, 3, 3, 1]

X = [my_first_time_series, t_2]

bar = dtw_barycenter_averaging_petitjean(X, 4)

print(bar)

distances = cdist_dtw(X)

print(distances)
"""

# ------ Testing example of creating synthetic time series using novice data -------- #

tic = time.perf_counter()

# Only looking at 5 novice examples
novice_set = get_subset_of_dataset("Novice", "NeedleTipToReference-Sequence.mha")[0:5]
# distances = cdist_dtw(novice_set)
# print(distances)
synthetic_samples = smote_based_weighted_dba(novice_set, 100, 1)

print("Synthetic time series before fixing R matrices (only printing values corresponding to first 2 time stamps):")
for t_series in synthetic_samples:
    print(t_series[0:2])

print("Check matrix multiplication of R'*R is eye(3), for one specific example (before fixing)")
product = np.dot(list_to_matrix(synthetic_samples[1][1])[0:3, 0:3], list_to_matrix(synthetic_samples[0][0])[0:3, 0:3].transpose())
np.savetxt(sys.stdout, product, '%.5f')


print("\nSynthetic time series after fixing R matrices (only printing values corresponding to first 2 time stamps):")
for i in range(len(synthetic_samples)):
    fix_rotation_matrices(synthetic_samples[i])
    print(synthetic_samples[i][0:2])

# # *** Looks like exact_nearest_rotation_matrix(R) does not work very well... address later
print("Check matrix multiplication of R'*R is eye(3), for one specific example (after fixing)")
product = np.dot(list_to_matrix(synthetic_samples[1][1])[0:3, 0:3], list_to_matrix(synthetic_samples[0][0])[0:3, 0:3].transpose())
np.savetxt(sys.stdout, product, '%.5f')

toc = time.perf_counter()
print("\nMinutes elapsed: %.2f" % ((toc - tic) / 60))  # Output: ~10.86 minutes for entire novice set

"""
Sample output:

>> Synthetic time series before fixing R matrices (only printing values corresponding to first 2 time stamps):
>> [[0.6770047876474946, -0.7210056888088937, 0.04027455024430607, -60.88810791482462, 0.2538137873528932, 0.3112323146369213, 0.9084522538719364, -152.9868102521692, -0.6687577437555381, -0.6023440607933238, 0.396583633159691, 10.471123495409017], [0.6727118546261525, -0.7231576424221688, 0.051651658589225165, -60.79309178995602, 0.25581098649768697, 0.3268445257659379, 0.9004183627622679, -152.6545889710731, -0.6708335901945619, -0.5881258231485351, 0.41015852158548816, 10.74697929684763]]
>> [[0.6565318918348465, -0.7486067214244819, 0.06963405677347263, -58.474907182218594, 0.22254955161434312, 0.284688500205944, 0.9312765154755791, -163.88295291296788, -0.7175103175489557, -0.5953144283074713, 0.3543361366751486, 10.147133290891201], [0.5808592371029793, -0.8075982853806121, 0.07331125504971236, -58.466241489323124, 0.19959419647878573, 0.2333449877310075, 0.950637533211526, -161.95703966461258, -0.7852637958715416, -0.5368535469026356, 0.29791937644920297, 10.364626388059994]]
>> [[0.7830520210470873, -0.6150564269953193, 0.08320596110906385, -58.54150523547359, 0.1654592810475431, 0.3362064318064641, 0.926591440012195, -152.96285377829383, -0.5984110194165397, -0.7120167005397168, 0.36586931806696354, 12.278665556635277], [0.7379526472580079, -0.6663117605525326, 0.05873032594972159, -59.14006439856273, 0.20514222035925148, 0.31022357575032355, 0.9267701970858724, -147.74132502746878, -0.6370987451425353, -0.6720494392524322, 0.3700379413306703, 11.410980743752301]]
>> [[0.6425754444218255, -0.7606817098064558, 0.07134431877485306, -58.59464355716105, 0.21074699008576592, 0.2684965622437031, 0.9392853711331705, -166.24894014010596, -0.7339300700736957, -0.5880791767721048, 0.3336350739042364, 9.451688399272902], [0.6401269226817417, -0.7627517161084589, 0.07280559536647435, -58.345059940176654, 0.21238007720045346, 0.27018953168355575, 0.938376046936219, -165.21541556503433, -0.7357235826767885, -0.5847531202175645, 0.33573095528501473, 10.226003828055816]]
>> [[0.7693435255970232, -0.6320114457969235, 0.07782207022673605, -58.78760294993708, 0.16464660430959632, 0.31530819909197666, 0.9340352223797005, -155.81073003866035, -0.6152119089860071, -0.7060851201921708, 0.34814815084357204, 11.276920967577784], [0.7351334293575555, -0.6677052698664167, 0.06783351714596875, -58.70387952568102, 0.19253572008893402, 0.3067330444843313, 0.9301207337821717, -149.9945860733573, -0.643485572067434, -0.6717234199004523, 0.3595505687504436, 12.032490746142456]]
>> Check matrix multiplication of R'*R is eye(3), for one specific example (before fixing)
>> 0.97848 -0.03732 0.12707
>> 0.00517 0.98689 0.10297
>> -0.13255 -0.09575 0.96667

>> Synthetic time series after fixing R matrices (only printing values corresponding to first 2 time stamps):
>> [[0.6818903390622227, -0.7237354070883836, 0.060820819979068824, -60.88810791482462, 0.2689341590312164, 0.2992103556038182, 0.9122085701313658, -152.9868102521692, -0.6801541104624601, -0.6216331174691125, 0.40485607262373047, 10.471123495409017], [0.6765739102769985, -0.7258674935139027, 0.07564232521086521, -60.79309178995602, 0.27535515785812575, 0.31537609479123785, 0.9055065587705107, -152.6545889710731, -0.6828343301108456, -0.611019957085562, 0.4171260651674567, 10.74697929684763]]
>> [[0.6572386894531796, -0.7495300999885165, 0.07269289806415799, -58.474907182218594, 0.22490126800307217, 0.2831521464618325, 0.9319794437020283, -163.88295291296788, -0.7193429655662458, -0.598351571813919, 0.3551401948275277, 10.147133290891201], [0.5818251830823128, -0.8092240100246815, 0.07729819658403689, -58.466241489323124, 0.2024278693736647, 0.2309797848710514, 0.9512851817817566, -161.95703966461258, -0.7877176415491035, -0.5401825576224517, 0.298449668146383, 10.364626388059994]]
>> [[0.7836992972805249, -0.6156489045197683, 0.08357647207580815, -58.54150523547359, 0.1660838197227183, 0.3366556398910403, 0.9270536357871774, -152.96285377829383, -0.5985243183659981, -0.7124881591119746, 0.36549459254234895, 12.278665556635277], [0.7409658189540946, -0.6691057810312289, 0.06062266935127772, -59.14006439856273, 0.20855068418739928, 0.3118319730127368, 0.9278179399883502, -147.74132502746878, -0.6383347953584274, -0.674579998924948, 0.3680675062334682, 11.410980743752301]]
>> [[0.6433950638412205, -0.7616605165336878, 0.07389757158222185, -58.59464355716105, 0.21263691141571756, 0.2670899926247126, 0.9396188282915517, -166.24894014010596, -0.7354093557071472, -0.590366890303852, 0.3341432851904268, 9.451688399272902], [0.6408312546151522, -0.7636272957350787, 0.07536313957650065, -58.345059940176654, 0.2143183511806669, 0.2688217424822403, 0.9387733643099971, -165.21541556503433, -0.73715763944541, -0.5870307799234006, 0.33618614781221723, 10.226003828055816]]
>> [[0.7704221781606481, -0.6328515897354737, 0.07794850968462344, -58.78760294993708, 0.16544286707780223, 0.3162844957826082, 0.9344878214204453, -155.81073003866035, -0.6156931533414944, -0.7067267827729312, 0.3473557924343277, 11.276920967577784], [0.7388387949097889, -0.6709739089587989, 0.06883628643615503, -58.70387952568102, 0.1960179322398317, 0.30976948491580186, 0.9317581076768024, -149.9945860733573, -0.6447390958230846, -0.6736724216243097, 0.3564837503484343, 12.032490746142456]]
>> Check matrix multiplication of R'*R is eye(3), for one specific example (after fixing)
>> 0.98711 -0.01514 0.13860
>> 0.02872 0.99132 0.10387
>> -0.12804 -0.10122 0.99239

Minutes elapsed: 0.03
"""
